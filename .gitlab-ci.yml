# Entrypoint is also needed as image by default set `terraform` binary as an
# entrypoint.
image:
  name: registry.gitlab.com/gitlab-org/terraform-images/releases/0.14:v0.8.0
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_ROOT: ${CI_PROJECT_DIR}/terraform/webcms
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/dev

  #Run in an automated fashion without console input
  #TF_IN_AUTOMATION: 1
  #TF_INPUT: 0

  TF_VAR_aws_region: "us-east-1"

  # Module-wide variables
  TF_VAR_environment: "preproduction"
  TF_VAR_site: 'dev'
  TF_VAR_lang: 'en'
  TF_VAR_tags: "{}"

  TF_VAR_image_tag_drupal: '665817092260.dkr.ecr.us-east-1.amazonaws.com/webcms-preproduction-dev-drupal:initial'
  TF_VAR_image_tag_nginx: '665817092260.dkr.ecr.us-east-1.amazonaws.com/webcms-preproduction-dev-nginx:initial'
  TF_VAR_image_tag_drush: '665817092260.dkr.ecr.us-east-1.amazonaws.com/webcms-preproduction-dev-drush:initial'

  TF_VAR_drupal_hostname: 'webcms-preproduction-6e916a8cff574d28.elb.us-east-1.amazonaws.com'
  TF_VAR_drupal_extra_hostnames: '[]'

  TF_VAR_drupal_min_capacity: '1'
  TF_VAR_drupal_max_capacity: '5'
  TF_VAR_drupal_use_s3_domain: 'false'
  TF_VAR_drupal_state: 'build'

  TF_VAR_email_auth_user: junk
  TF_VAR_email_from: 'noreply@example.com'
  TF_VAR_email_host: 'localhost'
  TF_VAR_email_port: '25'
  TF_VAR_email_enable_workflow_notifications: 'false'
  TF_VAR_email_protocol: 'tls'

  TF_VAR_akamai_enabled: 'false'
  TF_VAR_akamai_api_host: 'junk'

  TF_VAR_saml_sp_entity_id: ''
  TF_VAR_saml_sp_cert: ''
  TF_VAR_saml_idp_id: ''
  TF_VAR_saml_idp_sso_url: ''
  TF_VAR_saml_idp_slo_url: ''
  TF_VAR_saml_idp_cert: ''
  TF_VAR_saml_force_saml_login: 'false'

cache:
  key: development
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - cd ${TF_ROOT}
  - pwd
  - cp $backend_tf backend.tf
  - gitlab-terraform --version
  - gitlab-terraform init

stages:
  - validate
  - build
  - test
  - deploy

validate:
  stage: validate
  tags:
    - docker
  script:
    - gitlab-terraform validate
  only:
    - f1-IaC-updates

plan:
  stage: build
  tags:
    - docker
  script:
    - gitlab-terraform plan -var 'backend_state=""' -var 'backend_locks=""'
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  only:
    - f1-IaC-updates

# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: deploy
  tags:
    - docker
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  when: manual
  only:
    - f1-IaC-updates
