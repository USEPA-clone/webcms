diff --git a/config/schema/content_moderation_notifications.schema.yml b/config/schema/content_moderation_notifications.schema.yml
index 3e42ac7..93d8b4f 100644
--- a/config/schema/content_moderation_notifications.schema.yml
+++ b/config/schema/content_moderation_notifications.schema.yml
@@ -9,9 +9,20 @@ content_moderation_notifications.content_moderation_notification.*:
     uuid:
       type: string
       label: 'UUID'
+    group_use:
+      type: boolean
+      label: 'Group Use'
+    group_type:
+      type: string
+      label: 'Group Type'
     workflow:
        type: string
        label: 'Workflow'
+    group_roles:
+      type: sequence
+      sequence:
+        type: string
+        label: 'Group roles'
     transitions:
       type: sequence
       sequence:
diff --git a/content_moderation_notifications.services.yml b/content_moderation_notifications.services.yml
index fb4bb66..9c61ce5 100644
--- a/content_moderation_notifications.services.yml
+++ b/content_moderation_notifications.services.yml
@@ -4,4 +4,4 @@ services:
     arguments: ['@entity_type.manager', '@content_moderation.moderation_information']
   content_moderation_notifications.notification:
     class: Drupal\content_moderation_notifications\Notification
-    arguments: ['@current_user', '@entity_type.manager', '@plugin.manager.mail', '@module_handler', '@content_moderation_notifications.notification_information', '@?token.entity_mapper']
+    arguments: ['@current_user', '@entity_type.manager', '@plugin.manager.mail', '@module_handler', '@content_moderation_notifications.notification_information', '@?token.entity_mapper', '@?group.group_route_context']
diff --git a/src/ContentModerationNotificationInterface.php b/src/ContentModerationNotificationInterface.php
index 6c2cf6e..9593fdd 100644
--- a/src/ContentModerationNotificationInterface.php
+++ b/src/ContentModerationNotificationInterface.php
@@ -57,6 +57,30 @@ interface ContentModerationNotificationInterface extends ConfigEntityInterface {
    */
   public function getTransitions();
 
+  /**
+   * Determines if notification uses group functionality.
+   *
+   * @return bool
+   *   The group_use.
+   */
+  public function isGroupUse();
+
+  /**
+   * Get the group content types for which to send this notification.
+   *
+   * @return string
+   *   The relevant group content types.
+   */
+  public function getGroupType();
+
+  /**
+   * Get the group_role for which to send this notification.
+   *
+   * @return string[]
+   *   The relevant group_role.
+   */
+  public function getGroupRoles();
+
   /**
    * Gets the notification subject.
    *
diff --git a/src/Entity/ContentModerationNotification.php b/src/Entity/ContentModerationNotification.php
index d25d729..ac67ab2 100644
--- a/src/Entity/ContentModerationNotification.php
+++ b/src/Entity/ContentModerationNotification.php
@@ -50,6 +50,9 @@ use Drupal\Core\Entity\EntityStorageInterface;
  *     "workflow",
  *     "transitions",
  *     "roles",
+ *     "group_type",
+ *     "group_use",
+ *     "group_roles",
  *     "author",
  *     "site_mail",
  *     "emails",
@@ -113,6 +116,27 @@ class ContentModerationNotification extends ConfigEntityBase implements ContentM
    */
   public $transitions = [];
 
+  /**
+   * Determines if the notification uses group functionality.
+   *
+   * @var bool
+   */
+  public $group_use;
+
+  /**
+   * The associated group type for this notification.
+   *
+   * @var string
+   */
+  public $group_type;
+
+  /**
+   * The group_role IDs to this notification.
+   *
+   * @var string[]
+   */
+  public $group_roles = [];
+
   /**
    * The associated workflow for these notifications.
    *
@@ -143,6 +167,13 @@ class ContentModerationNotification extends ConfigEntityBase implements ContentM
     parent::preSave($storage);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function isGroupUse() {
+    return (bool) $this->get('group_use');
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -150,6 +181,20 @@ class ContentModerationNotification extends ConfigEntityBase implements ContentM
     return $this->get('transitions');
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getGroupType() {
+    return $this->get('group_type');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getGroupRoles() {
+    return $this->get('group_roles');
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/Form/ContentModerationNotificationsFormBase.php b/src/Form/ContentModerationNotificationsFormBase.php
index 47fb799..432d89c 100644
--- a/src/Form/ContentModerationNotificationsFormBase.php
+++ b/src/Form/ContentModerationNotificationsFormBase.php
@@ -5,6 +5,8 @@ namespace Drupal\content_moderation_notifications\Form;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
+use Drupal\group\Entity\GroupRoleInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 
 /**
  * Class ContentModerationNotificationFormBase.
@@ -36,6 +38,21 @@ class ContentModerationNotificationsFormBase extends EntityForm {
     return $form['transitions_wrapper'];
   }
 
+  /**
+   * Update options.
+   *
+   * @param array $form
+   *   Form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   Formstate.
+   *
+   * @return mixed
+   *   Returns the updated options.
+   */
+  public static function updateGroupRoles(array $form, FormStateInterface &$form_state) {
+    return $form['group_roles_wrapper'];
+  }
+
   /**
    * Overrides Drupal\Core\Entity\EntityFormController::form().
    *
@@ -163,6 +180,97 @@ class ContentModerationNotificationsFormBase extends EntityForm {
       '#description' => $this->t('Send notifications to all users with these roles.'),
     ];
 
+    // Group module notification functionality.
+    if ($this->moduleHandler->moduleExists('group')) {
+      /** @var \Drupal\Core\Entity\EntityStorageInterface $group_type_storage */
+      $group_type_storage = $this->entityTypeManager->getStorage('group_type');
+      $form['group_use'] = [
+        '#type' => 'checkbox',
+        '#title' => $this->t('Use group membership'),
+        '#default_value' => $content_moderation_notification->isGroupUse(),
+        '#description' => $this->t('Send notifications to members of any related group.'),
+      ];
+
+      // Build the options array of group types.
+      $group_type_options = array_map(static function (GroupTypeInterface $group_type) {
+        return $group_type->label();
+      }, $group_type_storage->loadMultiple());
+
+      // Default to the first group in the list.
+      $group_type_keys = array_keys($group_type_options);
+      $selected_group_type = array_shift($group_type_keys);
+      if ($form_state->getValue('group_type')) {
+        $selected_group_type = $form_state->getValue('group_type');
+      }
+      elseif (isset($content_moderation_notification->group_type)) {
+        $selected_group_type = $content_moderation_notification->group_type;
+      }
+
+      // Allow the group type to be selected, this will dynamically update the
+      // available group role lists.
+      $form['group_type'] = [
+        '#type' => 'select',
+        '#title' => $this->t('Group Types'),
+        '#options' => $group_type_options,
+        '#default_value' => $selected_group_type,
+        '#description' => $this->t('Select a group type'),
+        '#ajax' => [
+          'wrapper' => 'group_roles_wrapper',
+          'callback' => static::class . '::updateGroupRoles',
+        ],
+        '#states' => [
+          'visible' => [
+            "input[name='group_use']" => ['checked' => TRUE],
+          ],
+        ],
+      ];
+
+      // Ajax replaceable fieldset.
+      $form['group_roles_wrapper'] = [
+        '#type' => 'container',
+        '#prefix' => '<div id="group_roles_wrapper">',
+        '#suffix' => '</div>',
+        '#states' => [
+          'visible' => [
+            "input[name='group_use']" => ['checked' => TRUE],
+          ],
+        ],
+      ];
+
+      // Group Role.
+      $state_group_roles = [];
+      if ($selected_group_type) {
+        $state_group_roles = $this->entityTypeManager
+          ->getStorage('group_role')
+          ->loadByProperties(['group_type' => $selected_group_type]);
+        // Remove internal roles except the member role.
+        $state_group_roles = array_filter($state_group_roles, static function (GroupRoleInterface $group_role) {
+          return ($group_role->id() == $group_role->getGroupTypeId() . '-member') || !$group_role->isInternal();
+        });
+      }
+
+      $state_group_role_options = [];
+      if (!empty($state_group_roles)) {
+        // Build the options array of group types.
+        $state_group_role_options = array_map(static function (GroupRoleInterface $role) {
+          return $role->label();
+        }, $state_group_roles);
+      }
+
+      $form['group_roles_wrapper']['group_roles'] = [
+        '#type' => 'checkboxes',
+        '#title' => $this->t('Group Role'),
+        '#options' => $state_group_role_options,
+        '#default_value' => isset($content_moderation_notification->group_roles) ? $content_moderation_notification->group_roles : [],
+        '#description' => $this->t('Send notifications to all users with these roles.'),
+        '#states' => [
+          'required' => [
+            "input[name='group_use']" => ['checked' => TRUE],
+          ],
+        ],
+      ];
+    }
+
     // Send email to author?
     $form['author'] = [
       '#type' => 'checkbox',
diff --git a/src/Notification.php b/src/Notification.php
index 257f2a7..eed4470 100644
--- a/src/Notification.php
+++ b/src/Notification.php
@@ -6,7 +6,9 @@ use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
+use Drupal\Core\Plugin\Context\ContextProviderInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\group\Entity\Group;
 use Drupal\token\TokenEntityMapperInterface;
 use Drupal\user\EntityOwnerInterface;
 use Drupal\user\RoleInterface;
@@ -58,6 +60,11 @@ class Notification implements NotificationInterface {
    */
   protected $tokenEntityMapper;
 
+  /**
+   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface
+   */
+  protected $contextProvider;
+
   /**
    * Creates a new ModerationInformation instance.
    *
@@ -74,13 +81,14 @@ class Notification implements NotificationInterface {
    * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mappper
    *   The token entity mapper service.
    */
-  public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, MailManagerInterface $mail_manager, ModuleHandlerInterface $module_handler, NotificationInformationInterface $notification_information, TokenEntityMapperInterface $token_entity_mappper = NULL) {
+  public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, MailManagerInterface $mail_manager, ModuleHandlerInterface $module_handler, NotificationInformationInterface $notification_information, TokenEntityMapperInterface $token_entity_mappper = NULL, ContextProviderInterface $context_provider = NULL) {
     $this->currentUser = $current_user;
     $this->entityTypeManager = $entity_type_manager;
     $this->mailManager = $mail_manager;
     $this->moduleHandler = $module_handler;
     $this->notificationInformation = $notification_information;
     $this->tokenEntityMapper = $token_entity_mappper;
+    $this->contextProvider = $context_provider;
   }
 
   /**
@@ -174,6 +182,29 @@ class Notification implements NotificationInterface {
         }
       }
 
+      // Specific part to use group module functionality.
+      if ($this->moduleHandler->moduleExists('group')
+        && $notification->isGroupUse()) {
+        $group_contents = $this->entityTypeManager
+          ->getStorage('group_content')
+          ->loadByEntity($entity);
+
+        if ($group_contents) {
+          foreach ($group_contents as $group_content) {
+            /** @var \Drupal\group\Entity\Group $group */
+            $group = $group_content->getGroup();
+            $this->setGroupData($notification, $entity, $group, $data);
+          }
+        }
+        elseif($contexts = $this->contextProvider->getRuntimeContexts(['group'])) {
+          $context = $contexts['group'];
+          $group = $context->getContextValue();
+          if (!is_null($group)) {
+            $this->setGroupData($notification, $entity, $group, $data);
+          }
+        }
+      }
+
       // Adhoc emails.
       $adhoc_emails = $notification->getEmails();
       $template = [
@@ -211,4 +242,44 @@ class Notification implements NotificationInterface {
     }
   }
 
+  /**
+   * Add the group entity to the mail context in token replacement.
+   *
+   * @param \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param \Drupal\group\Entity\Group $group
+   * @param array $data
+   */
+  public function setGroupData(ContentModerationNotificationInterface $notification, EntityInterface $entity, Group $group, array &$data) {
+    if ($this->tokenEntityMapper) {
+      $data['params']['context'] = [
+        'entity' => $entity,
+        'user' => $this->currentUser,
+        'group' => $group,
+        $this->tokenEntityMapper->getTokenTypeForEntityType($entity->getEntityTypeId()) => $entity,
+      ];
+    }
+    else {
+      $data['params']['context'] = [
+        'entity' => $entity,
+        'user' => $this->currentUser,
+        'group' => $group,
+        $entity->getEntityTypeId() => $entity,
+      ];
+    }
+
+    // Get all the group members.
+    $notification_roles = array_values(array_filter($notification->getGroupRoles()));
+    foreach ($group->getMembers() as $member) {
+      // Add user if they have a role from the notification configuration.
+      if (array_intersect(array_keys($member->getRoles()), $notification_roles)) {
+        $member_user = $member->getUser();
+        if ($member_user->isActive()) {
+          // Add the group member to the email receiver.
+          $data['to'][] = $member_user->getEmail();
+        }
+      }
+    }
+  }
+
 }
diff --git a/tests/src/Unit/Entity/ContentModerationNotificationTest.php b/tests/src/Unit/Entity/ContentModerationNotificationTest.php
index 203ba14..378a40f 100644
--- a/tests/src/Unit/Entity/ContentModerationNotificationTest.php
+++ b/tests/src/Unit/Entity/ContentModerationNotificationTest.php
@@ -8,6 +8,7 @@ use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -133,6 +134,10 @@ class ContentModerationNotificationTest extends UnitTestCase {
     $entity_type_manager->getDefinition('content_moderation_notification')->willReturn($entity_type);
     $container->set('entity_type.manager', $entity_type_manager->reveal());
 
+    $module_handler = $this->prophesize(ModuleHandlerInterface::class);
+    $module_handler->moduleExists('group')->willReturn(FALSE);
+    $container->set('module_handler', $module_handler->reveal());
+
     \Drupal::setContainer($container);
 
     $storage = $this->prophesize(EntityStorageInterface::class);
