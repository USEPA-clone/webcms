diff --git a/src/Plugin/Danse/ContentModeration.php b/src/Plugin/Danse/ContentModeration.php
index 989ce0d..4664958 100644
--- a/src/Plugin/Danse/ContentModeration.php
+++ b/src/Plugin/Danse/ContentModeration.php
@@ -16,7 +16,8 @@ use Drupal\danse_content_moderation\Payload;
  * @Danse(
  *   id = "content_moderation",
  *   label = @Translation("Content Moderation"),
- *   description = @Translation("Provides Content Moderation integration for DANSE.")
+ *   description = @Translation("Provides Content Moderation integration for
+ *   DANSE.")
  * )
  */
 class ContentModeration extends PluginBase {
@@ -51,8 +52,7 @@ class ContentModeration extends PluginBase {
     $payload = $event->getPayload();
     try {
       return $payload->getEntity()->toUrl();
-    }
-    catch (EntityMalformedException $e) {
+    } catch (EntityMalformedException $e) {
       return Url::fromRoute('<front>');
     }
   }
@@ -72,10 +72,61 @@ class ContentModeration extends PluginBase {
     $topic = $entity->moderation_state->value;
     $parent_rev_id = $entity->content_entity_revision_id->value;
     $parent_entity_type = $entity->content_entity_type_id->value;
-    $revision = \Drupal::entityTypeManager()->getStorage($parent_entity_type)->loadRevision($parent_rev_id);
+    /** @var \Drupal\node\Entity\Node $revision */
+    $revision = \Drupal::entityTypeManager()
+      ->getStorage($parent_entity_type)
+      ->loadRevision($parent_rev_id);
+    // Try to load the 'previous' revision.
+    /** @var \Drupal\node\Entity\Node $last_version_node */
+    if ($last_version_node = $this->getPreviousRevision($revision->id(), $parent_rev_id)) {
+      $revision->last_revision = $last_version_node->getRevisionId();
+      $label = $revision->label() . ' transitioned to ' . $topic;
+      $revision_payload = new Payload($revision);
+      return $this->createEvent($topic, $label, $revision_payload);
+    }
+  }
+
+  /**
+   * @param $nid
+   * @param $currently_revision_id
+   *
+   * @return false|mixed
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   */
+  public function getPreviousRevision($nid, $currently_revision_id) {
+    // Getting the node storage.
+    /** @var \Drupal\node\NodeStorageInterface $node_storage */
+    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
+    // Getting the node.
+    $node = $node_storage->load($nid);
+
+    // Get all revisions of the current node, in all languages.
+    $revision_ids = $node_storage->revisionIds($node);
+
+    $revisions_before = [];
+    if (count($revision_ids) > 0) {
+      // Loop through the list of revision ids, select the ones that have.
+      // Same language as the current language AND are older than the current
+      // deleted revision.
+      foreach ($revision_ids as $vid) {
+        // Compare revision using vid, the newer revision has bigger vid.
+        if ($currently_revision_id - $vid > 0) {
+          $revision = $node_storage->loadRevision($vid);
+          array_push($revisions_before, $revision);
+        }
+      }
+
+      // Sort revisions by comparing revisionId, newest revision first.
+      usort($revisions_before, function ($rev1, $rev2) {
+        if ($rev1->getRevisionId() == $rev2->getRevisionId()) {
+          return 0;
+        }
+        return ($rev1->getRevisionId() < $rev2->getRevisionId()) ? -1 : 1;
+      });
+    }
 
-    $label = $revision->label() . ' transitioned to ' . $topic;
-    return $this->createEvent($topic, $label, $payload);
+    return reset($revisions_before);
   }
 
 }
