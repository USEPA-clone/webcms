diff --git a/ckeditor_abbreviation.routing.yml b/ckeditor_abbreviation.routing.yml
new file mode 100644
index 0000000..d87c87c
--- /dev/null
+++ b/ckeditor_abbreviation.routing.yml
@@ -0,0 +1,7 @@
+ckeditor_abbreviation.abbreviation_dialog:
+  path: '/ckeditor-abbreviation/dialog/abbreviation/{editor}'
+  defaults:
+    _form: '\Drupal\ckeditor_abbreviation\Form\CkeditorAbbreviationDialog'
+    _title: 'Add abbreviation'
+  requirements:
+    _entity_access: 'editor.use'
diff --git a/js/plugins/abbr/lang/de.js b/js/plugins/abbr/lang/de.js
new file mode 100644
index 0000000..9487ea1
--- /dev/null
+++ b/js/plugins/abbr/lang/de.js
@@ -0,0 +1,14 @@
+/**
+ * @file
+ * The abbr language string definitions.
+ */
+
+"use strict"
+
+CKEDITOR.plugins.setLang('abbr', 'de', {
+  buttonTitle: 'Abkürzung einfügen',
+  menuItemTitle: 'Abkürzung bearbeiten',
+  dialogTitle: 'Abkürzungseigenschaften',
+  dialogAbbreviationTitle: 'Abkürzung',
+  dialogExplanationTitle: 'Erklärung'
+});
diff --git a/js/plugins/abbr/lang/en.js b/js/plugins/abbr/lang/en.js
new file mode 100644
index 0000000..d82f495
--- /dev/null
+++ b/js/plugins/abbr/lang/en.js
@@ -0,0 +1,14 @@
+/**
+ * @file
+ * The abbr language string definitions.
+ */
+
+"use strict"
+
+CKEDITOR.plugins.setLang('abbr', 'en', {
+  buttonTitle: 'Insert Abbreviation',
+  menuItemTitle: 'Edit Abbreviation',
+  dialogTitle: 'Abbreviation Properties',
+  dialogAbbreviationTitle: 'Abbreviation',
+  dialogExplanationTitle: 'Explanation'
+});
diff --git a/js/plugins/abbr/lang/nl.js b/js/plugins/abbr/lang/nl.js
new file mode 100644
index 0000000..f6554dc
--- /dev/null
+++ b/js/plugins/abbr/lang/nl.js
@@ -0,0 +1,14 @@
+/**
+ * @file
+ * The abbr language string definitions.
+ */
+
+"use strict"
+
+CKEDITOR.plugins.setLang('abbr', 'nl', {
+  buttonTitle: 'Afkorting invoegen',
+  menuItemTitle: 'Afkorting bewerken',
+  dialogTitle: 'Afkortingseigenschappen',
+  dialogAbbreviationTitle: 'Afkorting',
+  dialogExplanationTitle: 'Uitleg'
+});
diff --git a/js/plugins/abbr/plugin.js b/js/plugins/abbr/plugin.js
new file mode 100644
index 0000000..c403e45
--- /dev/null
+++ b/js/plugins/abbr/plugin.js
@@ -0,0 +1,207 @@
+/**
+ * @file
+ * Plugin to insert abbreviation elements.
+ *
+ * Created out of the CKEditor Plugin SDK:
+ * http://docs.ckeditor.com/#!/guide/plugin_sdk_sample_1
+ */
+
+(function ($, Drupal, CKEDITOR) {
+  /**
+   * Gets the required attributes for abbreviations in the current element.
+   *
+   * @param  {CKEDITOR.dom.element} element - The CKEditor selected abbr element.
+   *
+   * @return {object} - The list of attributes.
+   */
+  function parseAttributes(element) {
+    var parsedAttributes = {};
+    var domElement = element.$;
+    var attribute, attributeName;
+
+    for (var attrIndex = 0; attrIndex < domElement.attributes.length; attrIndex++) {
+      attribute = domElement.attributes.item(attrIndex);
+      attributeName = attribute.nodeName.toLowerCase();
+
+      // data-cke-* attributes are automatically added by CKEditor. Ignore them.
+      if (attributeName.indexOf('data-cke-') === 0) {
+        continue;
+      }
+
+      // Only store the raw attribute if there isn't already a cke-saved- version of it.
+      parsedAttributes[attributeName] = element.data('cke-saved-' + attributeName) || attribute.nodeValue;
+    }
+
+    // Remove all cke_* classes.
+    if (parsedAttributes.class) {
+      parsedAttributes.class = CKEDITOR.tools.trim(parsedAttributes.class.replace(/cke_\S+/, ''));
+    }
+
+    // Set the "text" attribute.
+    parsedAttributes.text = domElement.innerText;
+
+    return parsedAttributes;
+  }
+
+  /**
+   * Gets the currently selected abbr element in the CKEditor.
+   *
+   * @param {CKEDITOR.editor} editor - The CKEditor object.
+   *
+   * @return {CKEDITOR.dom.element|null} - The CKEditor selected abbr element.
+   */
+  function getSelectedAbbreviation(editor) {
+    var selection = editor.getSelection();
+    var selectedElement = selection.getSelectedElement();
+    if (selectedElement && selectedElement.is('abbr')) {
+      return selectedElement;
+    }
+
+    var range = selection.getRanges(true)[0];
+
+    if (range) {
+      range.shrink(CKEDITOR.SHRINK_TEXT);
+      return editor.elementPath(range.getCommonAncestor()).contains('abbr', 1);
+    }
+    return null;
+  }
+
+
+  // Register the plugin within the editor.
+  CKEDITOR.plugins.add('abbr', {
+    lang: 'en,nl,de',
+
+    // Register the icons.
+    icons: 'abbr',
+
+    // The plugin initialization logic goes inside this method.
+    init: function (editor) {
+      var lang = editor.lang.abbr;
+
+      // Define an editor command that opens our dialog.
+      editor.addCommand('abbr', {
+        // Allow abbr tag with optional title.
+        allowedContent: 'abbr[title]',
+        // Require abbr tag to be allowed to work.
+        requiredContent: 'abbr',
+        // Prefer abbr over acronym. Transform acronyms into abbrs.
+        contentForms: [
+          'abbr',
+          'acronym'
+        ],
+        exec(editor) {
+          // Get existing values if an abbr element is currently selected.
+          var abbrElement = getSelectedAbbreviation(editor);
+          var existingValues = abbrElement && abbrElement.$
+              ? parseAttributes(abbrElement)
+              : {text: editor.getSelection().getSelectedText()};
+
+          /**
+           * Saves the dialog submission,
+           * inserting the information into the CKEditor DOM.
+           *
+           * @param {object} returnedValues - The returned values from the Drupal form.
+           */
+          var saveCallback = function(returnedValues) {
+            // If there isn't an existing abbr element, create it.
+            if (!abbrElement && returnedValues.attributes.text) {
+              var selection = editor.getSelection();
+              var range = selection.getRanges(1)[0];
+
+              if (range.collapsed) {
+                var text = new CKEDITOR.dom.text(
+                    returnedValues.attributes.text,
+                    editor.document,
+                )
+
+                range.insertNode(text);
+                range.selectNodeContents(text);
+              }
+
+              delete returnedValues.attributes.text;
+
+              var style = new CKEDITOR.style({
+                element: 'abbr',
+                attributes: returnedValues.attributes,
+              });
+              style.type = CKEDITOR.STYLE_INLINE;
+              style.applyToRange(range);
+              range.select();
+
+              abbrElement = getSelectedAbbreviation(editor);
+            } else if (abbrElement) {
+              if (returnedValues.attributes.text) {
+                abbrElement.$.innerText = returnedValues.attributes.text;
+              } else {
+                abbrElement.$.replaceWith(abbrElement.$.innerText);
+              }
+
+              delete returnedValues.attributes.text;
+
+              Object.keys(returnedValues.attributes || {}).forEach(attrName => {
+                if (returnedValues.attributes[attrName].length > 0) {
+                  var value = returnedValues.attributes[attrName];
+
+                  abbrElement.data('cke-saved-' + attrName, value);
+                  abbrElement.setAttribute(attrName, value);
+                } else {
+                  abbrElement.removeAttribute(attrName);
+                }
+              });
+            }
+          }
+
+          var dialogSettings = {
+            // Since CKEditor loads the JS file, Drupal.t() will not work.
+            // The config in the plugin settings can be translated server-side.
+            title: abbrElement
+                ? lang.menuItemTitle
+                : lang.buttonTitle,
+            dialogClass: 'ckeditor-abbreviation-dialog',
+          };
+
+          // Use the "Drupal way" of opening a dialog.
+          Drupal.ckeditor.openDialog(
+              editor,
+              Drupal.url('ckeditor-abbreviation/dialog/abbreviation/' + editor.config.drupal.format),
+              existingValues,
+              saveCallback,
+              dialogSettings,
+          );
+        }
+      });
+
+      // Create a toolbar button that executes the above command.
+      editor.ui.addButton('abbr', {
+
+        // The text part of the button (if available) and tooptip.
+        label: lang.buttonTitle,
+
+        // The command to execute on click.
+        command: 'abbr',
+
+        // The button placement in the toolbar (toolbar group name).
+        toolbar: 'insert',
+
+        // The path to the icon.
+        icon: this.path + '../../../' + 'icons/abbr.png'
+      });
+
+      if (editor.contextMenu) {
+        editor.addMenuGroup('abbrGroup');
+        editor.addMenuItem('abbrItem', {
+          label: lang.menuItemTitle,
+          icon: this.path + '../../../' +  'icons/abbr.png',
+          command: 'abbr',
+          group: 'abbrGroup'
+        });
+
+        editor.contextMenu.addListener(function (element) {
+          if (element.getAscendant('abbr', true)) {
+            return { abbrItem: CKEDITOR.TRISTATE_OFF };
+          }
+        });
+      }
+    }
+  });
+})(jQuery, Drupal, CKEDITOR);
diff --git a/src/Form/CkeditorAbbreviationDialog.php b/src/Form/CkeditorAbbreviationDialog.php
new file mode 100644
index 0000000..a2b9ae5
--- /dev/null
+++ b/src/Form/CkeditorAbbreviationDialog.php
@@ -0,0 +1,102 @@
+<?php
+
+namespace Drupal\ckeditor_abbreviation\Form;
+
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Ajax\CloseModalDialogCommand;
+use Drupal\Core\Ajax\HtmlCommand;
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\editor\Ajax\EditorDialogSave;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Provides an abbreviation dialog for text editors.
+ */
+class CkeditorAbbreviationDialog extends FormBase {
+  /**
+   * Gets the form's ID.
+   *
+   * @return string
+   */
+  public function getFormId() {
+    return 'ckeditor_abbreviation_dialog';
+  }
+
+  /**
+   * {@inheritdoc}
+   *
+   * @param array $form
+   *   The form array.
+   * @param Drupal\Core\Form\FormStateInterface $form_state
+   *   The form's state.
+   * @param Drupal\editor\Entity\Editor $editor
+   *   The editor.
+   */
+  public function buildForm(array $form, FormStateInterface $form_state, Editor $editor = NULL) {
+    // The default values are set directly from \Drupal::request()->request,
+    // provided by the editor plugin opening the dialog.
+    $user_input = $form_state->getUserInput();
+    $input = isset($user_input['editor_object']) ? $user_input['editor_object'] : [];
+
+    $form['#tree'] = TRUE;
+    $form['#attached']['library'][] = 'editor/drupal.editor.dialog';
+    $form['#prefix'] = '<div id="ckeditor-abbreviation-dialog-form">';
+    $form['#suffix'] = '</div>';
+
+    $form['attributes']['text'] = [
+      '#title' => $this->t('Abbreviation'),
+      '#type' => 'textfield',
+      '#default_value' => isset($input['text']) ? $input['text'] : '',
+    ];
+    $form['attributes']['title'] = [
+      '#title' => $this->t('Explanation'),
+      '#type' => 'textfield',
+      '#default_value' => isset($input['title']) ? $input['title'] : '',
+    ];
+
+    $form['actions'] = [
+      '#type' => 'actions',
+    ];
+    $form['actions']['save_modal'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Save'),
+      '#submit' => [],
+      '#ajax' => [
+        'callback' => '::submitForm',
+        'event' => 'click',
+      ]
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @param array $form
+   *   The form array.
+   * @param Drupal\Core\Form\FormStateInterface $form_state
+   *   The form's state.
+   * @return Drupal\Core\Ajax\AjaxResponse
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $response = new AjaxResponse();
+
+    if ($form_state->getErrors()) {
+      unset($form['#prefix'], $form['#suffix']);
+
+      $form['status_message'] = [
+        '#type' => 'status_messages',
+        '#weight' => -10,
+      ];
+
+      $response->addCommand(new HtmlCommand('#ckeditor-abbreviation-dialog-form', $form));
+    } else {
+      $response->addCommand(new EditorDialogSave($form_state->getValues()));
+      $response->addCommand(new CloseModalDialogCommand());
+    }
+
+    return $response;
+  }
+}
diff --git a/src/Plugin/CKEditorPlugin/AbbreviationCKEditorButton.php b/src/Plugin/CKEditorPlugin/AbbreviationCKEditorButton.php
new file mode 100644
index 0000000..e2d30dd
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/AbbreviationCKEditorButton.php
@@ -0,0 +1,78 @@
+<?php
+
+namespace Drupal\ckeditor_abbreviation\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "abbr" plugin.
+ *
+ * NOTE: The plugin ID ('id' key) corresponds to the CKEditor plugin name.
+ * It is the first argument of the CKEDITOR.plugins.add() function in the
+ * plugin.js file.
+ *
+ * @CKEditorPlugin(
+ *   id = "abbr",
+ *   label = @Translation("Abbreviation ckeditor button")
+ * )
+ */
+class AbbreviationCKEditorButton extends CKEditorPluginBase {
+
+  /**
+   * {@inheritdoc}
+   *
+   * NOTE: The keys of the returned array corresponds to the CKEditor button
+   * names. They are the first argument of the editor.ui.addButton() or
+   * editor.ui.addRichCombo() functions in the plugin.js file.
+   */
+  public function getButtons() {
+    // Make sure that the path to the image matches the file structure of
+    // the CKEditor plugin you are implementing.
+    $path = $this->getModulePath('ckeditor_abbreviation');
+    return [
+      'abbr' => [
+        'label' => $this->t('Abbreviation ckeditor button'),
+        'image' => $path . '/icons/abbr.png',
+      ],
+    ];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    // Make sure that the path to the plugin.js matches the file structure of
+    // the CKEditor plugin you are implementing.
+    return $this->getModulePath('ckeditor_abbreviation') . '/js/plugins/abbr/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isInternal() {
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getLibraries(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+}
