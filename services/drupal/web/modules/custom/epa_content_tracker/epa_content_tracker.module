<?php

/**
 * @file
 * Primary module hooks for EPA Content Tracker module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\content_moderation\Entity\ContentModerationStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\epa_content_tracker\Logger\EpaContentTrackerLogger;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function epa_content_tracker_content_moderation_state_insert(ContentModerationStateInterface $entity) {
  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  if ($epa_moderation->isModeratedEntity($entity)) {
    _epa_content_tracker_process_moderated_entity($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @see Drupal\group\Entity\GroupContent::postSave
 * @see https://www.drupal.org/project/group/issues/2872697
 * @see https://www.drupal.org/project/drupal/issues/2803717
 */
function epa_content_tracker_content_moderation_state_update(ContentModerationStateInterface $entity) {
  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  // Group will trigger an update after insert.
  // Check to see if entity is moderated.
  // Check to see if content revision id has changed.
  // Also, check that the moderation state isn't looping over itself.
  if ($epa_moderation->isModeratedEntity($entity)
    && $entity->content_entity_revision_id->value != $entity->original->content_entity_revision_id->value
    && $entity->getRevisionId() != $entity->getLoadedRevisionId()
  ) {
    _epa_content_tracker_process_moderated_entity($entity);
  }
}

function _epa_content_tracker_process_moderated_entity(ContentModerationStateInterface $moderated_entity) {
  $id = $moderated_entity->content_entity_id->value;
  $entity_type = $moderated_entity->content_entity_type_id->value;
  $node = $node = \Drupal::entityTypeManager()->getStorage($entity_type)->loadRevision($moderated_entity->content_entity_revision_id->value);
  $alias = $node->toUrl()->toString();
  $changed = $node->getChangedTime();
  $logger = new EpaContentTrackerLogger();
  if ('published' == $moderated_entity->moderation_state->value) {
    $logger->insert($entity_type, $id, $alias, $changed);
  }
  elseif ('unpublished' == $moderated_entity->moderation_state->value) {
    $logger->delete($entity_type, $id, $alias, $changed);
  }
}

/**
 * Implements hook_entity_delete().
 */
function epa_content_tracker_entity_predelete(EntityInterface $entity) {
  if ('node' == $entity->getEntitytypeId()) {
    $id = $entity->id();
    $entity_type = $entity->getEntityTypeId();
    // todo: must get the previous alias before the node was deleted
    $alias = $entity->toUrl()->toString();
    $changed = $entity->getChangedTime();
    $logger = new EpaContentTrackerLogger();
    $logger->delete($entity_type, $id, $alias, $changed);
  }
}

/**
 * Implements hook_path_update().
 * @param $path
 */
function epa_content_tracker_path_update($path) {
  if ($path['alias'] != $path['original']['alias']) {

//    \Drupal::database()
//      ->update('mytable')
//      ->fields([
//        'alias' => $path['alias'],
//      ])
//      ->condition('pid', $path['pid'])
//      ->execute();
  }
}

/**
 * Implements hook_views_data().
 */
function epa_content_tracker_views_data() {
  $data = [];

  // Expose the epa_content_tracker table to Views
  $data['epa_content_tracker'] = [];

  $data['epa_content_tracker']['table'] = [];
  $data['epa_content_tracker']['table']['group'] = t('EPA Content Tracker');
  $data['epa_content_tracker']['table']['provider'] = 'epa_content_tracker';

  $data['epa_content_tracker']['table']['base'] = [
    'field' => 'qiid',
    'title' => t('EPA content changes'),
    'help' => t('This table lists changes that have occurred to content.'),
  ];

  $data['epa_content_tracker']['qiid'] = [
    'title' => t('Queue item ID'),
    'help' => t('Index of this item in the content tracker queue.'),
    'field' => ['id' => 'numeric'],
    'argument' => ['id' => 'numeric'],
    'filter' => ['id' => 'numeric'],
    'sort' => ['id' => 'standard'],
  ];

  $data['epa_content_tracker']['entity_type'] = [
    'title' => t('Entity type'),
    'help' => t('The type of entity that was changed or deleted.'),
    'field' => ['id' => 'standard'],
    'filter' => ['id' => 'string'],
    'sort' => ['id' => 'standard'],
  ];

  $data['epa_content_tracker']['entity_id'] = [
    'title' => t('Entity ID'),
    'help' => t('The ID of the entity that was changed or deleted.'),
    'field' => ['id' => 'numeric'],
    'filter' => ['id' => 'numeric'],
    'sort' => ['id' => 'standard'],
  ];

  $data['epa_content_tracker']['alias'] = [
    'title' => t('Entity alias'),
    'help' => t('The path alias of the entity that was changed or deleted.'),
    'field' => ['id' => 'standard'],
    'filter' => ['id' => 'string'],
    'sort' => ['id' => 'standard'],
  ];

  $data['epa_content_tracker']['deleted'] = [
    'title' => t('Deleted'),
    'help' => t('Whether or not the entity was deleted.'),
    'field' => ['id' => 'boolean'],
    'filter' => ['id' => 'boolean'],
    'sort' => ['id' => 'standard'],
  ];

  $data['epa_content_tracker']['changed'] = [
    'title' => t('Changed timestamp'),
    'help' => t('Time of the most recent change.'),
    'field' => ['id' => 'date'],
    'filter' => ['id' => 'date'],
    'sort' => ['id' => 'date'],
  ];

  // Relationship field for nodes that were changed
  $data['epa_content_tracker']['related_node'] = [
    'title' => t('Affected node'),
    'help' => t('Data for the node that was changed.'),

    'relationship' => [
      'base' => 'node_field_data',
      'base field' => 'nid',
      'field' => 'entity_id',
      'id' => 'standard',
      'label' => t('Affected node'),

      // Limit this join only to node entities
      'extra' => [
        0 => [
          'left_field' => 'entity_type',
          'value' => 'node',
        ],
      ],
    ],
  ];

  $data['epa_content_tracker']['related_media'] = [
    'title' => t('Affected media'),
    'help' => t('Data for the media entity that was changed.'),

    'relationship' => [
      'base' => 'media_field_data',
      'base field' => 'mid',
      'field' => 'entity_id',
      'id' => 'standard',
      'label' => t('Affected media'),

      // As with the node case above, limit this join to media entities
      'extra' => [
        0 => [
          'left_field' => 'entity_type',
          'value' => 'media',
        ],
      ],
    ],
  ];

  return $data;
}
