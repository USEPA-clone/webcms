<?php

/**
 * @file
 * Primary module hooks for EPA Content Tracker module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\epa_content_tracker\Logger\EpaContentTrackerLogger;
use Drupal\Core\Url;

/**
 * Implements hook_entity_insert().
 */
function epa_content_tracker_entity_insert(EntityInterface $entity) {
  static $processed = FALSE;
  if ('node' == $entity->getEntitytypeId()) {
    $id = $entity->id();
    $entity_type = $entity->getEntityTypeId();
    $alias = $entity->toUrl()->toString();
    $changed = $entity->getChangedTime();
    $logger = new EpaContentTrackerLogger();

    $lang = $entity->get('langcode')->value;
    $translated_entity = $entity->getTranslation($lang);
    $mod_state=$translated_entity->get('moderation_state')->getValue();
    if (isset($mod_state[0]['value']) && FALSE == $processed) {
      // If the node is published and the current moderation revision, add it to the table.
      if ('published' == $mod_state[0]['value']) {
        $logger->insert($entity_type, $id, $alias, $changed);
        $processed = TRUE;
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function epa_content_tracker_entity_update(EntityInterface $entity) {
  static $processed = FALSE;
  if ('node' == $entity->getEntitytypeId()) {
    $id = $entity->id();
    $entity_type = $entity->getEntityTypeId();
    $alias = $entity->toUrl()->toString();
    $changed = $entity->getChangedTime();
    $logger= new EpaContentTrackerLogger();

    $lang = $entity->get('langcode')->value;
    $translated_entity = $entity->getTranslation($lang);
    $mod_state=$translated_entity->get('moderation_state')->getValue();
    if (isset($mod_state[0]['value']) && FALSE == $processed) {
      // If the node is published and the current moderation revision, add it to the table.
      if ('published' == $mod_state[0]['value']) {
        $logger->insert($entity_type, $id, $alias, $changed);
        $processed = TRUE;
      }
      // If the node is unpublished and the current moderation revision, add a delete record to the table.
      elseif ('unpublished' == $mod_state[0]['value']) {
        $logger->delete($entity_type, $id, $alias, $changed);
        $processed = TRUE;
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function epa_content_tracker_entity_predelete(EntityInterface $entity) {
  if ('node' == $entity->getEntitytypeId()) {
    $id = $entity->id();
    $entity_type = $entity->getEntityTypeId();
    // todo: must get the previous alias before the node was deleted
    $alias = $entity->toUrl()->toString();
    $changed = $entity->getChangedTime();
    $logger = new EpaContentTrackerLogger();
    $logger->delete($entity_type, $id, $alias, $changed);
  }
}

/**
 * Implements hook_path_update().
 * @param $path
 */
function epa_content_tracker_path_update($path) {
  if ($path['alias'] != $path['original']['alias']) {

//    \Drupal::database()
//      ->update('mytable')
//      ->fields([
//        'alias' => $path['alias'],
//      ])
//      ->condition('pid', $path['pid'])
//      ->execute();
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for media entities.
 */
function epa_content_tracker_media_insert(EntityInterface $entity) {
  $logger = new EpaContentTrackerLogger();
  $logger->mediaInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for media entities.
 */
function epa_content_tracker_media_presave(EntityInterface $entity) {
  $logger = new EpaContentTrackerLogger();

  // Conceptually, this hook is an update hook, but we need to run as a presave hook in
  // order to compare differences between $entity and $entity->original.
  if (!$entity->isNew()) {
    $logger->mediaUpdate($entity);
  }

  // The $entity->isNew() case is handled implicitly by the media_insert hook above this.
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for media entities.
 */
function epa_content_tracker_media_predelete(EntityInterface $entity) {
  $logger = new EpaContentTrackerLogger();
  $logger->mediaDelete($entity);
}

