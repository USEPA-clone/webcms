<?php

/**
 * @file
 * Install, update and uninstall functions for the book module.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function epa_workflow_install() {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $entity_type = $entity_type_manager->getDefinition('node');

  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_id = $entity_type->id();

  $revision_metadata_keys = $entity_type->get('revision_metadata_keys');
  $revision_metadata_keys['epa_revision_automated'] = 'epa_revision_automated';
  $entity_type->set('revision_metadata_keys', $revision_metadata_keys);
  $definition_update_manager->updateEntityType($entity_type);

  $epa_revision_automated = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Moderation automated'))
    ->setDescription(t('When true current moderation state is automated.'))
    ->setRevisionable(TRUE)
    ->setDefaultValue(NULL);

  $definition_update_manager->installFieldStorageDefinition('epa_revision_automated', $entity_type_id, $entity_type_id, $epa_revision_automated);
}

/**
 * Implements hook_uninstall().
 */
function epa_workflow_uninstall() {
  // Clear values stored in epa_revision_automated.
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_type_manager->getDefinition('node');

  $entity_revision_table = $entity_type->getRevisionTable();

  if ($revision_metadata_keys = $entity_type->get('revision_metadata_keys')) {
    if (is_array($revision_metadata_keys) && isset($revision_metadata_keys['epa_revision_automated'])) {
      unset($revision_metadata_keys['epa_revision_automated']);
      $entity_type->set('revision_metadata_keys', $revision_metadata_keys);
      $definition_update_manager->updateEntityType($entity_type);
    }
  }

  $database = \Drupal::database();
  if ($database->schema()->fieldExists($entity_revision_table, 'epa_revision_automated')) {
    $database->update($entity_revision_table)
      ->fields(['epa_revision_automated' => NULL])
      ->execute();
  }

}

/**
 * Sets all nodes with broken type reference to “Overviews and Fact Sheets”.
 */
function epa_workflow_update_9001(&$sandbox) {
  $results = \Drupal::database()
    ->query(
      "SELECT entity_id
             FROM node__field_type
             WHERE field_type_target_id NOT IN (
                SELECT tid from taxonomy_term_data where vid = 'type'
             );")
    ->fetchCol('entity_id');

  if (count($results)) {
    /** @var \Drupal\node\NodeInterface[] $nodes */
    $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($results);

    foreach ($nodes as $node) {
      $node->set('field_type', ['target_id' => 9]);
      $node->save();
    }
  }
}

/**
 * Update all nodes without field_review_deadline value to have value 1 year from now and a scheduled transition.
 */
function epa_workflow_update_9002(&$sandbox) {
  // Set the review deadline value to a year from now
  $now = \Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp(time());
  $now->add(new DateInterval('P1Y'));
  $formatted = $now->format('Y-m-d\TH:i:s');

  if (!isset($sandbox['total'])) {
    // Query all published nodes that do not have a field_review_deadline value set.
    $result = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('status', 1)
      ->notExists('field_review_deadline')
      ->execute();

    $sandbox['total'] = count($result);
    $sandbox['current'] = 0;
  }

  $batch_size = 25;

  $nids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->notExists('field_review_deadline')
    ->range($sandbox['current'], $batch_size)
    ->execute();

  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($nids);

  foreach ($nodes as $node) {
    $node->set('field_review_deadline', $formatted);
    $node->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()->addStatus($sandbox['current'] . ' nodes without review deadline processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update all published nodes missing a transition date with a review deadline
 * less than 3 weeks away or in the past.
 */
function epa_workflow_update_9003(&$sandbox) {
  // Create dates for 1 year in the future and 3 weeks in the future from now.
  $now = \Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp(time());
  $one_year = $three_weeks = $now;

  $one_year->add(new DateInterval('P1Y'));
  $formatted_one_year = $one_year->format('Y-m-d\TH:i:s');

  $three_weeks->add(new DateInterval('P3W'));
  $formatted_three_weeks = $three_weeks->format('Y-m-d\TH:i:s');

  if (!isset($sandbox['total'])) {
    // Query all published nodes that don't have a scheduled transition date, but
    // do have a review deadline
    $result = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('field_review_deadline', $formatted_three_weeks, '<=')
      ->notExists('field_scheduled_transition')
      ->execute();

    $sandbox['total'] = count($result);
    $sandbox['current'] = 0;
  }

  $batch_size = 25;

  $nids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('field_review_deadline', $formatted_three_weeks, '<=')
    ->notExists('field_scheduled_transition')
    ->range($sandbox['current'], $batch_size)
    ->execute();

  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($nids);

  foreach ($nodes as $node) {
    $node->set('field_review_deadline', $formatted_one_year);
    $node->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()->addStatus($sandbox['current'] . ' nodes with missing scheduled transition processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update all published nodes missing a transition date with a review deadline
 * more 3 weeks away.
 */
function epa_workflow_update_9004(&$sandbox) {
  $now = \Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp(time());
  $three_weeks = $now->add(new DateInterval('P3W'));
  $formatted_three_weeks = $three_weeks->format('Y-m-d\TH:i:s');

  if (!isset($sandbox['total'])) {
    // Query all published nodes that don't have a scheduled transition date, but
    // do have a review deadline
    $result = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('field_review_deadline', $formatted_three_weeks, '>=')
      ->notExists('field_scheduled_transition')
      ->execute();

    $sandbox['total'] = count($result);
    $sandbox['current'] = 0;
  }

  $batch_size = 25;

  $nids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('field_review_deadline', $formatted_three_weeks, '>=')
    ->notExists('field_scheduled_transition')
    ->range($sandbox['current'], $batch_size)
    ->execute();

  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($nids);

  foreach ($nodes as $node) {
    // Nothing needs to change on the node, but triggering a save will create a
    // scheduled transition date 3 weeks prior via the EPAPublished service.
    $node->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()->addStatus($sandbox['current'] . ' nodes with missing scheduled transition processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}
